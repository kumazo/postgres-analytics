--
-- ジップ分布（Zipf distribution）
--


-- Zipfの確率密度分布
with
params as (
  select
       1::int              as k,  -- 順位
       1::double precision as s,  -- 分布パラメータ
    1000::int              as N   -- 全体要素数
),
harmonic as (
  select sum(1/power(i, s)) as h from params, generate_series(1, N) as gs(i)
)
select (1/power(k, s)) / h as zipf from params, harmonic
;
/*
       zipf       
------------------
 0.13359213049244
(1 row)
*/

-- Zipf分布の累積度数分布
with
params as (
  select
    1::double precision as s,
    1000::int as N
)
select i as k,
  (1/power(i, s)) / (sum(1/power(i, s)) over()) as p,
  (sum(1/power(i, s)) over(order by i)) / (sum(1/power(i, s)) over()) as cum
from params, generate_series(1, N) as gs(i)
;
/*
  k   |          p           |        cum        
------+----------------------+-------------------
    1 |     0.13359213049244 |  0.13359213049244
    2 |   0.0667960652462201 |  0.20038819573866
    3 |   0.0445307101641467 | 0.244918905902807
    4 |     0.03339803262311 | 0.278316938525917
    5 |    0.026718426098488 | 0.305035364624405
    6 |   0.0222653550820734 | 0.327300719706478
    7 |   0.0190845900703486 | 0.346385309776827
    8 |    0.016699016311555 | 0.363084326088382
    9 |   0.0148435700547156 | 0.377927896143098
   10 |    0.013359213049244 | 0.391287109192342
   11 |   0.0121447391356764 | 0.403431848328018
   12 |   0.0111326775410367 | 0.414564525869055
   13 |   0.0102763177301877 | 0.424840843599242
   14 |   0.0095422950351743 | 0.434383138634417
   15 |  0.00890614203282935 | 0.443289280667246
   16 |  0.00834950815577751 | 0.451638788823024
   17 |  0.00785836061720236 | 0.459497149440226
   18 |  0.00742178502735779 | 0.466918934467584
   19 |  0.00703116476276001 | 0.473950099230344
   20 |  0.00667960652462201 | 0.480629705754966
   21 |  0.00636153002344953 | 0.486991235778415
   22 |  0.00607236956783819 | 0.493063605346253
   23 |  0.00580835349967131 | 0.498871958845925
   24 |  0.00556633877051834 | 0.504438297616443
   25 |  0.00534368521969761 | 0.509781982836141
    :
  990 |  0.00013494154595196 | 0.998658028702858
  991 | 0.000134805378902563 |  0.99879283408176
  992 | 0.000134669486383508 | 0.998927503568144
  993 | 0.000134533867565398 | 0.999062037435709
  994 | 0.000134398521622173 | 0.999196435957331
  995 | 0.000134263447731096 | 0.999330699405062
  996 | 0.000134128645072731 | 0.999464828050135
  997 | 0.000133994112830933 | 0.999598822162966
  998 | 0.000133859850192826 | 0.999732682013159
  999 | 0.000133725856348789 | 0.999866407869508
 1000 |  0.00013359213049244 |                 1
(1000 rows)
*/

--
-- Zipf分布の累積度数分布を配列にする関数
-- s 分布パラメータ
-- N 要素数
--
create or replace function cumulate_zipf(s double precision, N int) returns double precision[]
as $$
  with
  cum_zipf as (
    select (sum(1/power(i, s)) over(order by i)) / (sum(1/power(i, s)) over()) as cum
    from generate_series(1, N) as gs(i)
    )
  select 0::double precision || array_agg(cum) from cum_zipf;
$$ language sql;

-- 累積分布の配列
select unnest(
  cumulate_zipf(s := 1::double precision, N := 1000)
)
;
      unnest       
-------------------
                 0
  0.13359213049244
  0.20038819573866
 0.244918905902807
 0.278316938525917
 0.305035364624405
 0.327300719706478
 0.346385309776827
 0.363084326088382
 0.377927896143098
 0.391287109192342
 0.403431848328018
 0.414564525869055
 0.424840843599242
 0.434383138634417
 0.443289280667246
 0.451638788823024
 0.459497149440226
 0.466918934467584
                 :
 0.998117442758938
 0.998252794461565
 0.998388009168541
 0.998523087156906
 0.998658028702858
  0.99879283408176
 0.998927503568144
 0.999062037435709
 0.999196435957331
 0.999330699405062
 0.999464828050135
 0.999598822162966
 0.999732682013159
 0.999866407869508
                 1
(1001 rows)
*/

-- 100回の試行
with
cum_zipf as (
  select cumulate_zipf(s := 1::double precision, N := 1000) as cum
)
select n, width_bucket(random(), cum) as k from cum_zipf, generate_series(1, 100) as gs(n)
;
/*
  n  |  k  
-----+-----
   1 |  12
   2 |   9
   3 |  10
   4 |   1
   5 |   2
   6 |   3
   7 |   1
   8 |   5
   9 |  57
  10 |  38
  11 |   8
  12 |  52
  13 |   1
  14 | 740
  15 | 169
  16 |   3
  17 | 178
  18 |   7
  19 | 199
  20 |  46
  21 |   2
  22 | 325
  23 |   1
  24 | 131
  25 |  32
  26 | 486
  27 |  82
  28 | 199
  29 |  33
  30 |   1
  31 |   2
  32 | 685
  33 |  13
  34 |  33
  35 | 899
  36 |  50
  37 | 149
  38 |   1
  39 | 433
  40 |   8
  41 |  52
  42 |   4
  43 | 780
  44 |  74
  45 |   3
  46 | 132
  47 | 444
  48 | 844
  49 |   1
  50 |  88
  51 |  39
  52 |   3
  53 |  29
  54 |  66
  55 | 692
  56 |   1
  57 |  32
  58 |  57
  59 | 326
  60 |   1
  61 |  87
  62 |   1
  63 |   1
  64 |   1
  65 |  36
  66 |   1
  67 | 102
  68 |   5
  69 |   1
  70 |  44
  71 |  81
  72 |  83
  73 | 284
  74 |  63
  75 |   6
  76 |   1
  77 |   8
  78 |   3
  79 |   1
  80 |  13
  81 | 424
  82 |  44
  83 |  70
  84 |  12
  85 |   3
  86 |  49
  87 |  20
  88 | 167
  89 |   3
  90 |   6
  91 | 313
  92 | 427
  93 |   7
  94 | 401
  95 | 878
  96 | 462
  97 | 462
  98 |  90
  99 |   2
 100 | 732
(100 rows)
*/

-- 本当にZipf分布らしくなっているか度数のランキングを集計してみる。
with
cum_zipf as (
  select cumulate_zipf(s := 1::double precision, N := 1000) as cum
),
trials as (
  select n, width_bucket(random(), cum) as k from cum_zipf, generate_series(1, 10000) as gs(n)
)
select k as rank, count(k),
  repeat('*',(count(k)/10)::int) as bar
from trials group by k order by k
;

/*
 rank | count |                                                                 bar                                                                  
------+-------+--------------------------------------------------------------------------------------------------------------------------------------
    1 |  1324 | ************************************************************************************************************************************
    2 |   688 | ********************************************************************
    3 |   441 | ********************************************
    4 |   334 | *********************************
    5 |   273 | ***************************
    6 |   210 | *********************
    7 |   201 | ********************
    8 |   180 | ******************
    9 |   139 | *************
   10 |   131 | *************
   11 |   113 | ***********
   12 |   117 | ***********
   13 |    96 | *********
   14 |    80 | ********
   15 |    84 | ********
   16 |    92 | *********
   17 |    66 | ******
   18 |    83 | ********
   19 |    80 | ********
   20 |    52 | *****
   21 |    73 | *******
   22 |    55 | *****
   23 |    56 | *****
   24 |    63 | ******
   25 |    49 | ****
   26 |    40 | ****
   27 |    50 | *****
   28 |    45 | ****
   29 |    34 | ***
   30 |    42 | ****
   31 |    43 | ****
   32 |    51 | *****
   33 |    40 | ****
   34 |    38 | ***
   35 |    34 | ***
   36 |    35 | ***
   37 |    31 | ***
   38 |    42 | ****
   39 |    33 | ***
   40 |    27 | **
   41 |    29 | **
   42 |    31 | ***
   43 |    40 | ****
   44 |    37 | ***
   45 |    40 | ****
   46 |    29 | **
   47 |    38 | ***
   48 |    31 | ***
   49 |    24 | **
   50 |    19 | *
   51 |    31 | ***
   52 |    18 | *
   53 |    25 | **
   54 |    22 | **
   55 |    29 | **
   56 |    29 | **
   57 |    21 | **
   58 |    22 | **
   59 |    15 | *
   60 |    20 | **
   61 |    27 | **
   62 |    19 | *
   63 |    16 | *
   64 |    12 | *
   65 |    23 | **
   66 |    24 | **
   67 |    22 | **
   68 |    23 | **
   69 |    19 | *
   70 |    15 | *
   71 |    15 | *
   72 |    18 | *
   73 |    16 | *
   74 |    19 | *
   75 |    18 | *
   76 |    19 | *
   77 |    14 | *
   78 |    20 | **
   79 |    16 | *
   80 |    22 | **
            :
            :
  984 |     1 | 
  985 |     1 | 
  987 |     1 | 
  988 |     1 | 
  989 |     3 | 
  990 |     5 | 
  992 |     2 | 
  993 |     1 | 
  995 |     3 | 
  996 |     1 | 
  998 |     1 | 
  999 |     1 | 
 1000 |     1 | 
(913 rows)
*/



-- 後始末
drop function if exists cumulate_zipf;