--
-- テーブル関数で行を生成する。
--

-- generate_series関数

-- 関数をFROM句に置けばテーブルと同じように振る舞う。
-- エイリアスとカラム名も定義できる。
select gs.n from generate_series(1, 10) as gs(n)
;
/*
 n  
----
  1
  2
  3
  4
  5
  6
  7
  8
  9
 10
(10 rows)
*/

-- SELECTリストに直接置いても同様の結果が得られる。
select generate_series(1, 10) as n
;
/*
 n  
----
  1
  2
  3
  4
  5
  6
  7
  8
  9
 10
(10 rows)
*/


-- 日時系列を生成することもできる。
-- 範囲にtimestamp型かtimestamp with time zone 型を指定する。
-- テーブル関数にWITH ORDINARITY句を付けると、別途に連番も付与できる。
select i, dt
from generate_series('2019-01-01', '2019-12-31', interval '1 day') 
  with ordinality as gs(dt, i)
;
/*
  i  |           dt           
-----+------------------------
   1 | 2019-01-01 00:00:00+00
   2 | 2019-01-02 00:00:00+00
   3 | 2019-01-03 00:00:00+00
   4 | 2019-01-04 00:00:00+00
   5 | 2019-01-05 00:00:00+00
   6 | 2019-01-06 00:00:00+00
   7 | 2019-01-07 00:00:00+00
   8 | 2019-01-08 00:00:00+00
   9 | 2019-01-09 00:00:00+00
  10 | 2019-01-10 00:00:00+00
  11 | 2019-01-11 00:00:00+00
  12 | 2019-01-12 00:00:00+00
  13 | 2019-01-13 00:00:00+00
  14 | 2019-01-14 00:00:00+00
  15 | 2019-01-15 00:00:00+00
  16 | 2019-01-16 00:00:00+00
  17 | 2019-01-17 00:00:00+00
  18 | 2019-01-18 00:00:00+00
  19 | 2019-01-19 00:00:00+00
  20 | 2019-01-20 00:00:00+00
  21 | 2019-01-21 00:00:00+00
  22 | 2019-01-22 00:00:00+00
  23 | 2019-01-23 00:00:00+00
  24 | 2019-01-24 00:00:00+00
  25 | 2019-01-25 00:00:00+00
  26 | 2019-01-26 00:00:00+00
  27 | 2019-01-27 00:00:00+00
  28 | 2019-01-28 00:00:00+00
  29 | 2019-01-29 00:00:00+00
  30 | 2019-01-30 00:00:00+00
  31 | 2019-01-31 00:00:00+00
  32 | 2019-02-01 00:00:00+00
  33 | 2019-02-02 00:00:00+00
  34 | 2019-02-03 00:00:00+00
  35 | 2019-02-04 00:00:00+00
  36 | 2019-02-05 00:00:00+00
  37 | 2019-02-06 00:00:00+00
  38 | 2019-02-07 00:00:00+00
  39 | 2019-02-08 00:00:00+00
  40 | 2019-02-09 00:00:00+00

 350 | 2019-12-16 00:00:00+00
 351 | 2019-12-17 00:00:00+00
 352 | 2019-12-18 00:00:00+00
 353 | 2019-12-19 00:00:00+00
 354 | 2019-12-20 00:00:00+00
 355 | 2019-12-21 00:00:00+00
 356 | 2019-12-22 00:00:00+00
 357 | 2019-12-23 00:00:00+00
 358 | 2019-12-24 00:00:00+00
 359 | 2019-12-25 00:00:00+00
 360 | 2019-12-26 00:00:00+00
 361 | 2019-12-27 00:00:00+00
 362 | 2019-12-28 00:00:00+00
 363 | 2019-12-29 00:00:00+00
 364 | 2019-12-30 00:00:00+00
 365 | 2019-12-31 00:00:00+00
(365 rows)
*/


-- unnest関数

-- 配列を要素のテーブルに変換する
select unnest(array[1,2,3,4,5])
;
/*
 unnest 
--------
      1
      2
      3
      4
      5
(5 rows)
*/


-- regexp_split_to_table関数

-- 区切り文字で文字列を分割して、集合（テーブル）として返す。
select i, fld from regexp_split_to_table('apple,cherry,banana', ',') with ordinality as csv(fld,i)
;
/*
 i |  fld   
---+--------
 1 | apple
 2 | cherry
 3 | banana
(3 rows)
*/


-- jsonb_each_text関数

-- JSONをキーと値のペアのテーブルに変換する
with
json_data as (
  select
    '{"id":1, "name":"Hoge", "email":"aaa@hoge.local"}'::jsonb as js
)
select kv.* from json_data, jsonb_each_text(js) kv(k,v)
;
/*
   k   |       v        
-------+----------------
 id    | 1
 name  | Hoge
 email | aaa@hoge.local
(3 rows)
*/